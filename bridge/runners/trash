
def save_sequence(num_steps, x, name='', im_dir='./im', gif_dir = './gif', xlim=None, ylim=None, ipf_it=None, freq=1):

    # PARTICLES (INIT AND FINAL DISTRIB)

    plot_paths = []
    for k in range(num_steps):
        if k % freq == 0:
            filename =  name + 'particle_' + str(k) + '.png'
            filename = os.path.join(im_dir, filename)
            plt.clf()
            if (xlim is not None) and (ylim is not None):
                plt.xlim(*xlim)
                plt.ylim(*ylim)
            plt.plot(x[-1, :, 0], x[-1, :, 1], '*')
            plt.plot(x[0, :, 0], x[0, :, 1], '*')
            plt.plot(x[k, :, 0], x[k, :, 1], '*')
            if ipf_it is not None:
                str_title = 'IPFP iteration: ' + str(ipf_it)
                plt.title(str_title)
                
            #plt.axis('equal')
            plt.savefig(filename, bbox_inches = 'tight', transparent = True, dpi=DPI)
            plot_paths.append(filename)

    # TRAJECTORIES

    N_part = 10
    filename = name + 'trajectory.png'
    filename = os.path.join(im_dir, filename)
    plt.clf()
    plt.plot(x[-1, :, 0], x[-1, :, 1], '*')
    plt.plot(x[0, :, 0], x[0, :, 1], '*')
    for j in range(N_part):
        xj = x[:, j, :]
        plt.plot(xj[:, 0], xj[:, 1], 'g', linewidth=2)
        plt.plot(xj[0,0], xj[0,1], 'rx')
        plt.plot(xj[-1,0], xj[-1,1], 'rx')
    plt.savefig(filename, bbox_inches = 'tight', transparent = True, dpi=DPI)

    make_gif(plot_paths, output_directory=gif_dir, gif_name=name)

    # REGISTRATION

    colors = np.cos(0.1 * x[0, :, 0]) * np.cos(0.1 * x[0, :, 1])

    name_gif = name + 'registration'
    plot_paths_reg = []
    for k in range(num_steps):
        if k % freq == 0:
            filename =  name + 'registration_' + str(k) + '.png'
            filename = os.path.join(im_dir, filename)
            plt.clf()
            if (xlim is not None) and (ylim is not None):
                plt.xlim(*xlim)
                plt.ylim(*ylim)
            plt.plot(x[-1, :, 0], x[-1, :, 1], '*', alpha=0)
            plt.plot(x[0, :, 0], x[0, :, 1], '*', alpha=0)
            plt.scatter(x[k, :, 0], x[k, :, 1], c=colors)
            if ipf_it is not None:
                str_title = 'IPFP iteration: ' + str(ipf_it)
                plt.title(str_title)            
            plt.savefig(filename, bbox_inches = 'tight', transparent = True, dpi=DPI)
            plot_paths_reg.append(filename)

    make_gif(plot_paths_reg, output_directory=gif_dir, gif_name=name_gif)

    # DENSITY

    name_gif = name + 'density'
    plot_paths_reg = []
    npts = 100
    for k in range(num_steps):
        if k % freq == 0:
            filename =  name + 'density_' + str(k) + '.png'
            filename = os.path.join(im_dir, filename)
            plt.clf()
            if (xlim is not None) and (ylim is not None):
                plt.xlim(*xlim)
                plt.ylim(*ylim)
            else:
                xlim = [-15, 15]
                ylim = [-15, 15]
            if ipf_it is not None:
                str_title = 'IPFP iteration: ' + str(ipf_it)
                plt.title(str_title)                            
            plt.hist2d(x[k, :, 0], x[k, :, 1], range=[[xlim[0], xlim[1]], [ylim[0], ylim[1]]], bins=npts)
            plt.savefig(filename, bbox_inches = 'tight', transparent = True, dpi=DPI)
            plot_paths_reg.append(filename)

    make_gif(plot_paths_reg, output_directory=gif_dir, gif_name=name_gif)    



